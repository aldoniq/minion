package main

import (
	"fmt"
	"log"
	"os"

	"minion/internal/commands"
	"minion/internal/config"

	"github.com/spf13/cobra"
)

var Version = "2.1.0"

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–∞–¥–∞–µ–º
	if err := config.LoadEnvFile(); err != nil {
		fmt.Printf("‚ùå %v\n", err)
		fmt.Println("üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example")
		os.Exit(1)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	envConfig := config.LoadEnvConfig()

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if errors := config.ValidateEnvConfig(envConfig); len(errors) > 0 {
		fmt.Println("‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
		for _, err := range errors {
			fmt.Printf("  - %s\n", err)
		}
		fmt.Println("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª–µ")
		os.Exit(1)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –∫–æ–º–∞–Ω–¥—É
	rootCmd := &cobra.Command{
		Use:     "minion",
		Short:   "üçå BELLO! Minion - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è iiko API",
		Long:    "üçå BELLO! –ú–∏–Ω–∏–æ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å iiko API. –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é.",
		Version: Version,
		PersistentPreRun: func(cmd *cobra.Command, args []string) {
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥
			config.PrintEnvConfig(envConfig)
			fmt.Println()
		},
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
	rootCmd.AddCommand(commands.ExtendKeysCmd)
	rootCmd.AddCommand(commands.RefreshMenusCmd)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Ä—Å–∏–∏
	rootCmd.SetVersionTemplate("üçå Minion v{{.Version}} - BANANA!\n")

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
	if err := rootCmd.Execute(); err != nil {
		log.Fatal(err)
	}
}
