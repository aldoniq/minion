package handlers

import (
	"context"
	"fmt"
	"log"
	"time"

	"minion/internal/client"
	"minion/internal/config"
	"minion/internal/models"

	"github.com/gofiber/fiber/v2"
)

// APIResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API
type APIResponse struct {
	Success bool        `json:"success"`
	Message string      `json:"message"`
	Data    interface{} `json:"data,omitempty"`
	Error   string      `json:"error,omitempty"`
}

// OperationResult —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
type OperationResult struct {
	ProcessedRestaurants int                `json:"processed_restaurants"`
	Successful           int                `json:"successful"`
	Failed               int                `json:"failed"`
	Duration             string             `json:"duration"`
	Details              []RestaurantResult `json:"details"`
}

// RestaurantResult —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
type RestaurantResult struct {
	Name    string `json:"name"`
	Success bool   `json:"success"`
	Updated int    `json:"updated"`
	Message string `json:"message,omitempty"`
	Error   string `json:"error,omitempty"`
}

// HealthCheck –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
func HealthCheck(c *fiber.Ctx) error {
	return c.JSON(APIResponse{
		Success: true,
		Message: "üçå BELLO! Minion API —Ä–∞–±–æ—Ç–∞–µ—Ç",
		Data: fiber.Map{
			"status":    "healthy",
			"timestamp": time.Now().Format(time.RFC3339),
			"version":   "2.1.0",
		},
	})
}

// GetConfig –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
func GetConfig(c *fiber.Ctx) error {
	envConfig := config.LoadEnvConfig()

	return c.JSON(APIResponse{
		Success: true,
		Message: "üîß –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
		Data: fiber.Map{
			"aws_region":      envConfig.AWSRegion,
			"aws_secret_name": envConfig.AWSSecretName,
		},
	})
}

// ExtendKeys –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è API –∫–ª—é—á–µ–π
func ExtendKeys(c *fiber.Ctx) error {
	log.Printf("üîë API –∑–∞–ø—Ä–æ—Å: –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –æ—Ç %s", c.IP())

	startTime := time.Now()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
	restaurants, extensionYears, err := loadRestaurants()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: %v", err)
		return c.Status(500).JSON(APIResponse{
			Success: false,
			Message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤",
			Error:   err.Error(),
		})
	}

	result := OperationResult{
		ProcessedRestaurants: len(restaurants),
		Details:              make([]RestaurantResult, 0),
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
	for _, restaurant := range restaurants {
		if !restaurant.Enabled {
			log.Printf("‚è≠Ô∏è  –†–µ—Å—Ç–æ—Ä–∞–Ω %s –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", restaurant.Name)
			continue
		}

		restaurantResult := RestaurantResult{
			Name: restaurant.Name,
		}

		updated, err := processExtendKeys(*restaurant, extensionYears)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ %s: %v", restaurant.Name, err)
			restaurantResult.Success = false
			restaurantResult.Error = err.Error()
			result.Failed++
		} else {
			log.Printf("‚úÖ –†–µ—Å—Ç–æ—Ä–∞–Ω %s: –æ–±–Ω–æ–≤–ª–µ–Ω–æ %d –∫–ª—é—á–µ–π", restaurant.Name, updated)
			restaurantResult.Success = true
			restaurantResult.Updated = updated
			restaurantResult.Message = fmt.Sprintf("–û–±–Ω–æ–≤–ª–µ–Ω–æ %d –∫–ª—é—á–µ–π", updated)
			result.Successful++
		}

		result.Details = append(result.Details, restaurantResult)
	}

	result.Duration = time.Since(startTime).String()

	log.Printf("üéâ GELATO! –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ: %d —É—Å–ø–µ—à–Ω–æ, %d –æ—à–∏–±–æ–∫",
		result.Successful, result.Failed)

	return c.JSON(APIResponse{
		Success: true,
		Message: fmt.Sprintf("üéâ GELATO! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤", result.ProcessedRestaurants),
		Data:    result,
	})
}

// RefreshMenus –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
func RefreshMenus(c *fiber.Ctx) error {
	log.Printf("üçΩÔ∏è API –∑–∞–ø—Ä–æ—Å: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –æ—Ç %s", c.IP())

	startTime := time.Now()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
	restaurants, _, err := loadRestaurants()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: %v", err)
		return c.Status(500).JSON(APIResponse{
			Success: false,
			Message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤",
			Error:   err.Error(),
		})
	}

	result := OperationResult{
		ProcessedRestaurants: len(restaurants),
		Details:              make([]RestaurantResult, 0),
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
	for _, restaurant := range restaurants {
		if !restaurant.Enabled {
			log.Printf("‚è≠Ô∏è  –†–µ—Å—Ç–æ—Ä–∞–Ω %s –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", restaurant.Name)
			continue
		}

		restaurantResult := RestaurantResult{
			Name: restaurant.Name,
		}

		updated, err := processRefreshMenus(*restaurant)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ %s: %v", restaurant.Name, err)
			restaurantResult.Success = false
			restaurantResult.Error = err.Error()
			result.Failed++
		} else {
			log.Printf("‚úÖ –†–µ—Å—Ç–æ—Ä–∞–Ω %s: –æ–±–Ω–æ–≤–ª–µ–Ω–æ %d –º–µ–Ω—é", restaurant.Name, updated)
			restaurantResult.Success = true
			restaurantResult.Updated = updated
			restaurantResult.Message = fmt.Sprintf("–û–±–Ω–æ–≤–ª–µ–Ω–æ %d –º–µ–Ω—é", updated)
			result.Successful++
		}

		result.Details = append(result.Details, restaurantResult)
	}

	result.Duration = time.Since(startTime).String()

	log.Printf("üéâ GELATO! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ: %d —É—Å–ø–µ—à–Ω–æ, %d –æ—à–∏–±–æ–∫",
		result.Successful, result.Failed)

	return c.JSON(APIResponse{
		Success: true,
		Message: fmt.Sprintf("üéâ GELATO! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤", result.ProcessedRestaurants),
		Data:    result,
	})
}

// loadRestaurants –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func loadRestaurants() ([]*models.Restaurant, int, error) {
	envConfig := config.LoadEnvConfig()
	restaurants, err := config.LoadRestaurants(context.Background(), envConfig)
	if err != nil {
		return nil, 0, err
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è extension_years
	return restaurants, 2, nil
}

// processExtendKeys –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
func processExtendKeys(restaurant models.Restaurant, extensionYears int) (int, error) {
	apiClient := client.NewIikoClient(restaurant.BaseURL)

	// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
	sessionID, err := apiClient.Login(restaurant.Login, restaurant.Password)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %v", err)
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ API –ª–æ–≥–∏–Ω–æ–≤
	response, err := apiClient.GetApiLogins(sessionID)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –ª–æ–≥–∏–Ω–æ–≤: %v", err)
	}

	updatedCount := 0
	for _, apiLogin := range response.ApiLogins {
		if !apiLogin.IsActive {
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		detailResponse, err := apiClient.GetApiLoginDetail(sessionID, apiLogin.ID)
		if err != nil {
			continue
		}

		newExpirationDate, err := extendExpirationDate(detailResponse.ApiLoginInfo.ExpirationDate, extensionYears)
		if err != nil {
			continue
		}

		if newExpirationDate == detailResponse.ApiLoginInfo.ExpirationDate {
			continue
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
		detailResponse.ApiLoginInfo.ExpirationDate = newExpirationDate
		err = apiClient.SaveApiLoginDetail(sessionID, detailResponse.ApiLoginInfo)
		if err != nil {
			continue
		}

		updatedCount++
	}

	return updatedCount, nil
}

// processRefreshMenus –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
func processRefreshMenus(restaurant models.Restaurant) (int, error) {
	apiClient := client.NewIikoClient(restaurant.BaseURL)

	// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
	sessionID, err := apiClient.Login(restaurant.Login, restaurant.Password)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %v", err)
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –º–µ–Ω—é
	menus, err := apiClient.GetExternalMenus(sessionID)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é: %v", err)
	}

	updatedCount := 0
	for _, menu := range menus.Data {
		// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
		err := apiClient.RefreshExternalMenu(sessionID, menu.ID)
		if err != nil {
			continue
		}
		updatedCount++
	}

	return updatedCount, nil
}

// extendExpirationDate –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç
func extendExpirationDate(currentDate string, years int) (string, error) {
	// –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
	parsedTime, err := time.Parse("02.01.2006", currentDate)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã %s: %v", currentDate, err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥—ã
	newTime := parsedTime.AddDate(years, 0, 0)

	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ - 31.12.2099
	maxDate := time.Date(2099, 12, 31, 0, 0, 0, 0, time.UTC)
	if newTime.After(maxDate) {
		newTime = maxDate
	}

	return newTime.Format("02.01.2006"), nil
}
