package commands

import (
	"fmt"
	"log"
	"strings"
	"time"

	"minion/internal/client"
	"minion/internal/config"
	"minion/internal/models"

	"github.com/spf13/cobra"
)

// ExtendKeysCmd - –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è API –∫–ª—é—á–µ–π
var ExtendKeysCmd = &cobra.Command{
	Use:   "extend-keys",
	Short: "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è API –∫–ª—é—á–µ–π",
	Long:  "üîë –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è API –∫–ª—é—á–µ–π –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è",
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("üçå BELLO! –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è API –∫–ª—é—á–µ–π...")

		cfg, err := config.LoadConfig("config.json")
		if err != nil {
			log.Fatal("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", err)
		}

		totalUpdated := 0
		successCount := 0
		failedCount := 0

		for _, restaurant := range cfg.Restaurants {
			if !restaurant.Enabled {
				fmt.Printf("‚è≠Ô∏è  –†–µ—Å—Ç–æ—Ä–∞–Ω %s –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º\n", restaurant.Name)
				continue
			}

			updated, err := processExtendKeys(restaurant, cfg.ExtensionYears)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ %s: %v\n", restaurant.Name, err)
				failedCount++
			} else {
				fmt.Printf("üéâ GELATO! –†–µ—Å—Ç–æ—Ä–∞–Ω %s: –æ–±–Ω–æ–≤–ª–µ–Ω–æ %d –∫–ª—é—á–µ–π\n", restaurant.Name, updated)
				totalUpdated += updated
				successCount++
			}
		}

		printSummary("API –∫–ª—é—á–µ–π", successCount, failedCount, totalUpdated)
	},
}

// RefreshMenusCmd - –∫–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
var RefreshMenusCmd = &cobra.Command{
	Use:   "refresh-menus",
	Short: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –º–µ–Ω—é",
	Long:  "üçΩÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤",
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("üçå BELLO! –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é...")

		cfg, err := config.LoadConfig("config.json")
		if err != nil {
			log.Fatal("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", err)
		}

		totalUpdated := 0
		successCount := 0
		failedCount := 0

		for _, restaurant := range cfg.Restaurants {
			if !restaurant.Enabled {
				fmt.Printf("‚è≠Ô∏è  –†–µ—Å—Ç–æ—Ä–∞–Ω %s –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º\n", restaurant.Name)
				continue
			}

			updated, err := processRefreshMenus(restaurant)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ %s: %v\n", restaurant.Name, err)
				failedCount++
			} else {
				fmt.Printf("üéâ GELATO! –†–µ—Å—Ç–æ—Ä–∞–Ω %s: –æ–±–Ω–æ–≤–ª–µ–Ω–æ %d –º–µ–Ω—é\n", restaurant.Name, updated)
				totalUpdated += updated
				successCount++
			}
		}

		printSummary("–º–µ–Ω—é", successCount, failedCount, totalUpdated)
	},
}

// processExtendKeys –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
func processExtendKeys(restaurant models.Restaurant, extensionYears int) (int, error) {
	fmt.Printf("\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: %s\n", restaurant.Name)

	apiClient := client.NewIikoClient(restaurant.BaseURL)

	// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
	sessionID, err := apiClient.Login(restaurant.Login, restaurant.Password)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %v", err)
	}
	fmt.Println("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")

	// –ü–æ–ª—É—á–µ–Ω–∏–µ API –ª–æ–≥–∏–Ω–æ–≤
	response, err := apiClient.GetApiLogins(sessionID)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –ª–æ–≥–∏–Ω–æ–≤: %v", err)
	}
	fmt.Printf("üìã –ù–∞–π–¥–µ–Ω–æ %d API –ª–æ–≥–∏–Ω–æ–≤\n", len(response.ApiLogins))

	updatedCount := 0
	for _, apiLogin := range response.ApiLogins {
		if !apiLogin.IsActive {
			fmt.Printf("‚è≠Ô∏è  API –ª–æ–≥–∏–Ω %s –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º\n", apiLogin.Name)
			continue
		}

		fmt.Printf("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ API –ª–æ–≥–∏–Ω–∞: %s\n", apiLogin.Name)

		// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		detailResponse, err := apiClient.GetApiLoginDetail(sessionID, apiLogin.ID)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: %v\n", err)
			continue
		}

		newExpirationDate, err := extendExpirationDate(detailResponse.ApiLoginInfo.ExpirationDate, extensionYears)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: %v\n", err)
			continue
		}

		fmt.Printf("üìÖ –¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫: %s\n", detailResponse.ApiLoginInfo.ExpirationDate)

		if newExpirationDate == detailResponse.ApiLoginInfo.ExpirationDate {
			fmt.Printf("‚úÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º\n")
			continue
		}

		fmt.Printf("üìÖ –ù–æ–≤—ã–π —Å—Ä–æ–∫: %s\n", newExpirationDate)

		// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
		detailResponse.ApiLoginInfo.ExpirationDate = newExpirationDate

		err = apiClient.SaveApiLoginDetail(sessionID, detailResponse.ApiLoginInfo)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v\n", err)
			continue
		}

		fmt.Printf("‚úÖ API –ª–æ–≥–∏–Ω %s —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n", apiLogin.Name)
		updatedCount++
	}

	return updatedCount, nil
}

// processRefreshMenus –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
func processRefreshMenus(restaurant models.Restaurant) (int, error) {
	fmt.Printf("\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: %s\n", restaurant.Name)

	apiClient := client.NewIikoClient(restaurant.BaseURL)

	// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
	sessionID, err := apiClient.Login(restaurant.Login, restaurant.Password)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %v", err)
	}
	fmt.Println("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –º–µ–Ω—é
	menuResponse, err := apiClient.GetExternalMenus(sessionID)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ–Ω—é: %v", err)
	}

	if menuResponse.Error {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API")
	}

	fmt.Printf("üìã –ù–∞–π–¥–µ–Ω–æ %d –≤–Ω–µ—à–Ω–∏—Ö –º–µ–Ω—é\n", len(menuResponse.Data))

	updatedCount := 0
	for _, menu := range menuResponse.Data {
		fmt.Printf("üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é: %s (ID: %d)\n", menu.Name, menu.ID)

		err = apiClient.RefreshExternalMenu(sessionID, menu.ID)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é %s: %v\n", menu.Name, err)
			continue
		}

		fmt.Printf("‚úÖ –ú–µ–Ω—é %s —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n", menu.Name)
		updatedCount++
	}

	return updatedCount, nil
}

// extendExpirationDate –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–∞—Ç—ã
func extendExpirationDate(currentDate string, years int) (string, error) {
	formats := []string{
		"2006-01-02 15:04:05.000",
		"2006-01-02 15:04:05",
		"2006-01-02T15:04:05.000Z",
		"2006-01-02T15:04:05Z",
		"2006-01-02",
	}

	var parsedTime time.Time
	var err error

	for _, format := range formats {
		parsedTime, err = time.Parse(format, currentDate)
		if err == nil {
			break
		}
	}

	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É %s: %v", currentDate, err)
	}

	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ = —Å–µ–≥–æ–¥–Ω—è + —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç
	maxDate := time.Now().AddDate(years, 0, 0)

	// –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏–ª–∏ –±–æ–ª—å—à–µ, –Ω–µ –∏–∑–º–µ–Ω—è–µ–º
	if !parsedTime.Before(maxDate) {
		return currentDate, nil
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É
	return maxDate.Format("2006-01-02 15:04:05.000"), nil
}

// printSummary –≤—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
func printSummary(itemType string, successCount, failedCount, totalUpdated int) {
	fmt.Println("\n" + strings.Repeat("=", 50))
	fmt.Println("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
	fmt.Println(strings.Repeat("=", 50))
	fmt.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: %d\n", successCount)
	fmt.Printf("‚ùå –û—à–∏–±–æ–∫: %d\n", failedCount)
	fmt.Printf("üîÑ –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ %s: %d\n", itemType, totalUpdated)

	if failedCount == 0 {
		fmt.Println("\nüçå BANANA! –í—Å–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! üéâ")
	} else {
		fmt.Println("\n‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
	}
}
