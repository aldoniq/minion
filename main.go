package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"time"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
type Config struct {
	ExtensionYears int          `json:"extension_years"`
	Restaurants    []Restaurant `json:"restaurants"`
}

type Restaurant struct {
	Name     string `json:"name"`
	BaseURL  string `json:"base_url"`
	Login    string `json:"login"`
	Password string `json:"password"`
	Enabled  bool   `json:"enabled"`
}

type LoginRequest struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

type ApiLogin struct {
	ID             string `json:"id"`
	Name           string `json:"name"`
	IsActive       bool   `json:"isActive"`
	ExpirationDate string `json:"expirationDate"`
}

type ApiLoginsResponse struct {
	CorrelationID string     `json:"correlationId"`
	ApiLogins     []ApiLogin `json:"apiLogins"`
}

// –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ API –ª–æ–≥–∏–Ω–∞
type ApiLoginDetail struct {
	ID              string         `json:"id"`
	APIKey          string         `json:"apiKey"`
	Name            string         `json:"name"`
	SourceKey       string         `json:"sourceKey"`
	IsActive        bool           `json:"isActive"`
	IncludedRmses   []IncludedRms  `json:"includedRmses"`
	TemplateID      string         `json:"templateId"`
	ExternalMenus   []ExternalMenu `json:"externalMenus"`
	PriceCategories []interface{}  `json:"priceCategories"`
	Email           string         `json:"email"`
	ExpirationDate  string         `json:"expirationDate"`
	IsLongLived     bool           `json:"isLongLived"`
}

type IncludedRms struct {
	ID                string          `json:"id"`
	Name              string          `json:"name"`
	Rating            string          `json:"rating"`
	CrmID             interface{}     `json:"crmId"`
	WebHookSettings   WebHookSettings `json:"webHookSettings"`
	LastConnectToUoc  string          `json:"lastConnectToUoc"`
	ConnectedToCard   bool            `json:"connectedToCard"`
	IsCloud           bool            `json:"isCloud"`
	HasRestApiLicense bool            `json:"hasRestApiLicense"`
}

type WebHookSettings struct {
	Blocked        bool           `json:"blocked"`
	WebHooksUri    string         `json:"webHooksUri"`
	AuthToken      string         `json:"authToken"`
	WebHooksFilter WebHooksFilter `json:"webHooksFilter"`
}

type WebHooksFilter struct {
	DeliveryOrderFilter      OrderFilter   `json:"deliveryOrderFilter"`
	TableOrderFilter         OrderFilter   `json:"tableOrderFilter"`
	ReserveFilter            ReserveFilter `json:"reserveFilter"`
	StopListUpdateFilter     UpdateFilter  `json:"stopListUpdateFilter"`
	PersonalShiftFilter      UpdateFilter  `json:"personalShiftFilter"`
	NomenclatureUpdateFilter UpdateFilter  `json:"nomenclatureUpdateFilter"`
}

type OrderFilter struct {
	OrderStatuses []string `json:"orderStatuses"`
	ItemStatuses  []string `json:"itemStatuses"`
	Errors        bool     `json:"errors"`
}

type ReserveFilter struct {
	Updates bool `json:"updates"`
	Errors  bool `json:"errors"`
}

type UpdateFilter struct {
	Updates bool `json:"updates"`
}

type ExternalMenu struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type ApiLoginDetailRequest struct {
	ApiLoginID string `json:"apiLoginId"`
}

type ApiLoginDetailResponse struct {
	CorrelationID string         `json:"correlationId"`
	ApiLoginInfo  ApiLoginDetail `json:"apiLoginInfo"`
}

// HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è iiko API
type IikoClient struct {
	baseURL    string
	httpClient *http.Client
}

func NewIikoClient(baseURL string) *IikoClient {
	return &IikoClient{
		baseURL:    strings.TrimSuffix(baseURL, "/"),
		httpClient: &http.Client{Timeout: 30 * time.Second},
	}
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ PHPSESSID
func (c *IikoClient) Login(login, password string) (string, error) {
	loginData := LoginRequest{Login: login, Password: password}
	jsonData, _ := json.Marshal(loginData)

	req, err := http.NewRequest("POST", c.baseURL+"/api/auth/login", bytes.NewBuffer(jsonData))
	if err != nil {
		return "", err
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept", "application/json")

	resp, err := c.httpClient.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
	}

	for _, cookie := range resp.Cookies() {
		if cookie.Name == "PHPSESSID" {
			return cookie.Value, nil
		}
	}

	return "", fmt.Errorf("PHPSESSID –Ω–µ –Ω–∞–π–¥–µ–Ω")
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ API –ª–æ–≥–∏–Ω–æ–≤
func (c *IikoClient) GetApiLogins(sessionID string) (*ApiLoginsResponse, error) {
	req, err := http.NewRequest("GET", c.baseURL+"/api/integration-management/api-logins/get-all", nil)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Accept", "application/json, text/plain, */*")
	req.Header.Set("Accept-Language", "ru_RU")
	req.Header.Set("Cookie", "PHPSESSID="+sessionID)
	req.Header.Set("Origin", c.baseURL)
	req.Header.Set("Referer", c.baseURL+"/integration-management/index.html")

	resp, err := c.httpClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–∏–Ω–æ–≤, —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	var response ApiLoginsResponse
	if err := json.Unmarshal(body, &response); err != nil {
		return nil, err
	}

	return &response, nil
}

// –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–∞—Ç—ã
func extendExpirationDate(currentDate string, years int) (string, error) {
	formats := []string{
		"2006-01-02 15:04:05.000",
		"2006-01-02 15:04:05",
		"2006-01-02T15:04:05.000Z",
		"2006-01-02T15:04:05Z",
		"2006-01-02",
	}

	var parsedTime time.Time
	var err error

	for _, format := range formats {
		parsedTime, err = time.Parse(format, currentDate)
		if err == nil {
			break
		}
	}

	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É %s: %v", currentDate, err)
	}

	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ = —Å–µ–≥–æ–¥–Ω—è + —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç
	maxDate := time.Now().AddDate(years, 0, 0)

	// –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏–ª–∏ –±–æ–ª—å—à–µ, –Ω–µ –∏–∑–º–µ–Ω—è–µ–º
	if !parsedTime.Before(maxDate) {
		return currentDate, nil
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É
	return maxDate.Format("2006-01-02 15:04:05.000"), nil
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func loadConfig(filename string) (*Config, error) {
	data, err := os.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var config Config
	if err := json.Unmarshal(data, &config); err != nil {
		return nil, err
	}

	if config.ExtensionYears == 0 {
		config.ExtensionYears = 2
	}

	return &config, nil
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
func processRestaurant(restaurant Restaurant, extensionYears int) (int, error) {
	fmt.Printf("\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: %s\n", restaurant.Name)

	client := NewIikoClient(restaurant.BaseURL)

	// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
	sessionID, err := client.Login(restaurant.Login, restaurant.Password)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %v", err)
	}
	fmt.Println("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")

	// –ü–æ–ª—É—á–µ–Ω–∏–µ API –ª–æ–≥–∏–Ω–æ–≤
	response, err := client.GetApiLogins(sessionID)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –ª–æ–≥–∏–Ω–æ–≤: %v", err)
	}
	fmt.Printf("üìã –ù–∞–π–¥–µ–Ω–æ %d API –ª–æ–≥–∏–Ω–æ–≤\n", len(response.ApiLogins))

	updatedCount := 0
	for _, apiLogin := range response.ApiLogins {
		if !apiLogin.IsActive {
			fmt.Printf("‚è≠Ô∏è  API –ª–æ–≥–∏–Ω %s –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º\n", apiLogin.Name)
			continue
		}

		fmt.Printf("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ API –ª–æ–≥–∏–Ω–∞: %s\n", apiLogin.Name)

		// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		detailResponse, err := client.GetApiLoginDetail(sessionID, apiLogin.ID)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: %v\n", err)
			continue
		}

		newExpirationDate, err := extendExpirationDate(detailResponse.ApiLoginInfo.ExpirationDate, extensionYears)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: %v\n", err)
			continue
		}

		fmt.Printf("üìÖ –¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫: %s\n", detailResponse.ApiLoginInfo.ExpirationDate)

		if newExpirationDate == detailResponse.ApiLoginInfo.ExpirationDate {
			fmt.Printf("‚úÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º\n")
			continue
		}

		fmt.Printf("üìÖ –ù–æ–≤—ã–π —Å—Ä–æ–∫: %s\n", newExpirationDate)

		// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
		detailResponse.ApiLoginInfo.ExpirationDate = newExpirationDate

		err = client.SaveApiLoginDetail(sessionID, detailResponse.ApiLoginInfo)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v\n", err)
			continue
		}

		fmt.Printf("‚úÖ API –ª–æ–≥–∏–Ω %s —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n", apiLogin.Name)
		updatedCount++
	}

	return updatedCount, nil
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API –ª–æ–≥–∏–Ω–µ
func (c *IikoClient) GetApiLoginDetail(sessionID string, apiLoginID string) (*ApiLoginDetailResponse, error) {
	requestData := ApiLoginDetailRequest{ApiLoginID: apiLoginID}
	jsonData, _ := json.Marshal(requestData)

	req, err := http.NewRequest("POST", c.baseURL+"/api/integration-management/api-logins/get", bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept", "application/json, text/plain, */*")
	req.Header.Set("Accept-Language", "ru_RU")
	req.Header.Set("Cookie", "PHPSESSID="+sessionID)
	req.Header.Set("Origin", c.baseURL)
	req.Header.Set("Referer", c.baseURL+"/integration-management/index.html")

	resp, err := c.httpClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π, —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	var response ApiLoginDetailResponse
	if err := json.Unmarshal(body, &response); err != nil {
		return nil, err
	}

	return &response, nil
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ API –ª–æ–≥–∏–Ω–∞
func (c *IikoClient) SaveApiLoginDetail(sessionID string, apiLoginDetail ApiLoginDetail) error {
	jsonData, _ := json.Marshal(apiLoginDetail)

	req, err := http.NewRequest("POST", c.baseURL+"/api/integration-management/save-api-login", bytes.NewBuffer(jsonData))
	if err != nil {
		return err
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept", "application/json, text/plain, */*")
	req.Header.Set("Accept-Language", "ru_RU")
	req.Header.Set("Cookie", "PHPSESSID="+sessionID)
	req.Header.Set("Origin", c.baseURL)
	req.Header.Set("Referer", c.baseURL+"/integration-management/index.html")

	resp, err := c.httpClient.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
	}

	return nil
}

func main() {
	fmt.Println("üçå BELLO! Minion API Key Extension Tool –∑–∞–ø—É—â–µ–Ω!")

	config, err := loadConfig("config.json")
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", err)
	}

	totalUpdated := 0
	successCount := 0
	failedCount := 0

	for _, restaurant := range config.Restaurants {
		if !restaurant.Enabled {
			fmt.Printf("‚è≠Ô∏è  –†–µ—Å—Ç–æ—Ä–∞–Ω %s –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º\n", restaurant.Name)
			continue
		}

		updated, err := processRestaurant(restaurant, config.ExtensionYears)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ %s: %v\n", restaurant.Name, err)
			failedCount++
		} else {
			fmt.Printf("üéâ GELATO! –†–µ—Å—Ç–æ—Ä–∞–Ω %s: –æ–±–Ω–æ–≤–ª–µ–Ω–æ %d –∫–ª—é—á–µ–π\n", restaurant.Name, updated)
			totalUpdated += updated
			successCount++
		}
	}

	fmt.Println("\n" + strings.Repeat("=", 50))
	fmt.Println("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
	fmt.Println(strings.Repeat("=", 50))
	fmt.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: %d\n", successCount)
	fmt.Printf("‚ùå –û—à–∏–±–æ–∫: %d\n", failedCount)
	fmt.Printf("üîë –í—Å–µ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–æ API –∫–ª—é—á–µ–π: %d\n", totalUpdated)

	if failedCount == 0 {
		fmt.Println("\nüçå BANANA! –í—Å–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! üéâ")
	} else {
		fmt.Println("\n‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
	}
}
